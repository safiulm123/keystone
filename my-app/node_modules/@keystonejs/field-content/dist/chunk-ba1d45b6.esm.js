import '@babel/runtime/helpers/esm/objectWithoutProperties';
import '@babel/runtime/helpers/esm/extends';
import '@emotion/core';
import { b as hasBlock } from './chunk-6fbba733.esm.js';
import '@arch-ui/theme';
import '@arch-ui/color-utils';
import '@arch-ui/tooltip';
import '@arch-ui/typography';
import { a as ToolbarButton } from './chunk-2eef5f01.esm.js';
import { createElement } from 'react';
import { type } from './chunk-302bcd6d.esm.js';
let type$1 = 'heading';

function ToolbarElement(_ref) {
  let {
    editor,
    editorState
  } = _ref;
  return createElement(ToolbarButton, {
    icon: createElement("span", {
      "aria-hidden": true
    }, "H"),
    label: "Heading",
    isActive: hasBlock(editorState, type$1),
    onClick: () => {
      if (hasBlock(editorState, type$1)) {
        editor.setBlocks({
          type: type
        });
      } else {
        editor.setBlocks({
          type: type$1
        });
      }

      editor.focus();
    }
  });
}

function Node(_ref2) {
  let {
    attributes,
    children
  } = _ref2;
  return createElement("h2", attributes, children);
}

let getPlugins = () => [{
  onKeyDown(event, editor, next) {
    // make it so when you press enter after typing a heading,
    // the block type will change to a paragraph
    if (event.keyCode === 13 && editor.value.blocks.every(block => block.type === type$1)) {
      editor.splitBlock().setBlocks(type);
      return;
    }

    next();
  }

}];

export { type$1 as type, ToolbarElement, Node, getPlugins };
