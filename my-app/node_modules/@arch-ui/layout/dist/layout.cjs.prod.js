"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), core = require("@emotion/core"), react = require("react"), styled = _interopDefault(require("@emotion/styled")), common = require("@arch-ui/common"), theme = require("@arch-ui/theme");

const CONTAINER_WIDTH = 1160, CONTAINER_GUTTER = 6 * theme.gridSize, Container = styled.div(_ref => {
  return {
    maxWidth: _ref.isFullWidth ? "100%" : 1160,
    paddingLeft: CONTAINER_GUTTER,
    paddingRight: CONTAINER_GUTTER,
    transition: "max-width 200ms cubic-bezier(0.2, 0, 0, 1)",
    [common.mediaQueries.smOnly]: {
      paddingLeft: 2 * theme.gridSize,
      paddingRight: 2 * theme.gridSize
    }
  };
});

function collapseBorderRadii(index, length) {
  let style;
  const isFirst = 0 === index, isLast = index === length - 1;
  return isLast && !isFirst ? style = {
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  } : isFirst && !isLast ? style = {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  } : isFirst || isLast || (style = {
    borderRadius: 0
  }), style;
}

const FlexGroup = react.forwardRef((_ref2, ref) => {
  let align = _ref2.align, Tag = _ref2.as, children = _ref2.children, growIndexes = _ref2.growIndexes, isContiguous = _ref2.isContiguous, isInline = _ref2.isInline, isVertical = _ref2.isVertical, justify = _ref2.justify, wrap = _ref2.wrap, spacing = _ref2.spacing, stretch = _ref2.stretch, props = _objectWithoutProperties(_ref2, [ "align", "as", "children", "growIndexes", "isContiguous", "isInline", "isVertical", "justify", "wrap", "spacing", "stretch" ]);
  const gutter = spacing / 2, length = react.Children.count(children), childArray = react.Children.toArray(children).filter(child => child);
  return core.jsx(Tag, _extends({
    css: {
      alignItems: align,
      display: isInline ? "inline-flex" : "flex",
      flexDirection: isVertical ? "column" : "row",
      flexWrap: wrap ? "wrap" : "nowrap",
      justifyContent: justify,
      marginBottom: isVertical ? -gutter : null,
      marginLeft: isContiguous || isVertical ? null : -gutter,
      marginRight: isContiguous || isVertical ? null : -gutter,
      marginTop: isVertical ? -gutter : null,
      maxWidth: isInline ? "calc(100% + ".concat(2 * gutter, "px)") : null
    },
    ref: ref
  }, props), childArray.map((child, idx) => {
    const style = isContiguous ? collapseBorderRadii(idx, length) : null, leftOffset = isContiguous && idx ? -1 : gutter, rightOffset = isContiguous ? null : gutter;
    return core.jsx("div", {
      key: child.key,
      css: {
        flex: stretch || growIndexes.includes(idx) ? 1 : null,
        marginLeft: isVertical ? null : leftOffset,
        marginRight: isVertical ? null : rightOffset,
        marginTop: isVertical ? gutter : null,
        marginBottom: isVertical ? gutter : null,
        minWidth: 0,
        "&:focus-within": {
          position: "relative"
        }
      }
    }, isContiguous ? react.cloneElement(child, {
      style: style
    }) : child);
  }));
});

function formatAreas(areas) {
  return areas.map(area => '"'.concat(area, '"')).join(" ");
}

FlexGroup.defaultProps = {
  align: "stretch",
  as: "div",
  growIndexes: [],
  justify: "flex-start",
  spacing: theme.gridSize
};

const Grid = _ref3 => {
  let alignContent = _ref3.alignContent, areas = _ref3.areas, _ref3$columns = _ref3.columns, columns = void 0 === _ref3$columns ? 12 : _ref3$columns, _ref3$flow = _ref3.flow, flow = void 0 === _ref3$flow ? "row" : _ref3$flow, _ref3$gap = _ref3.gap, gap = void 0 === _ref3$gap ? 8 : _ref3$gap, justifyContent = _ref3.justifyContent, _ref3$minRowHeight = _ref3.minRowHeight, minRowHeight = void 0 === _ref3$minRowHeight ? 20 : _ref3$minRowHeight, rows = _ref3.rows, props = _objectWithoutProperties(_ref3, [ "alignContent", "areas", "columns", "flow", "gap", "justifyContent", "minRowHeight", "rows" ]);
  const templateRows = rows ? {
    gridTemplateRows: rows
  } : {}, templateAreas = areas ? {
    gridTemplateAreas: formatAreas(areas)
  } : {}, gridTemplateColumns = Number.isInteger(columns) ? "repeat(".concat(columns, ", 1fr)") : columns;
  return core.jsx("div", _extends({
    css: _objectSpread({
      display: "grid",
      gridAutoFlow: flow,
      gridAutoRows: "minmax(".concat(minRowHeight, "px, auto)"),
      gridGap: gap,
      gridTemplateColumns: gridTemplateColumns,
      justifyContent: justifyContent,
      alignContent: alignContent
    }, templateRows, templateAreas)
  }, props));
}, Cell = _ref4 => {
  let area = _ref4.area, _ref4$height = _ref4.height, height = void 0 === _ref4$height ? 1 : _ref4$height, left = _ref4.left, top = _ref4.top, _ref4$width = _ref4.width, width = void 0 === _ref4$width ? 1 : _ref4$width, props = _objectWithoutProperties(_ref4, [ "area", "height", "left", "top", "width" ]);
  return core.jsx("div", _extends({
    css: {
      alignContent: "space-around",
      gridArea: area,
      gridColumnEnd: "span ".concat(width),
      gridColumnStart: left,
      gridRowEnd: "span ".concat(height),
      gridRowStart: top,
      height: "100%",
      minWidth: 0
    }
  }, props));
};

exports.CONTAINER_WIDTH = 1160, exports.CONTAINER_GUTTER = CONTAINER_GUTTER, exports.Container = Container, 
exports.FlexGroup = FlexGroup, exports.Grid = Grid, exports.Cell = Cell;
