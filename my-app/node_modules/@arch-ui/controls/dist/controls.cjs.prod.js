"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), React = require("react"), React__default = _interopDefault(React), reactRadios = require("react-radios"), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), memoize = _interopDefault(require("memoize-one")), reactPseudoState = require("react-pseudo-state"), styled = _interopDefault(require("@emotion/styled")), theme = require("@arch-ui/theme"), input = require("@arch-ui/input");

const Wrapper = styled.div({
  display: "flex",
  alignItems: "center"
}), Label = styled.label({
  alignItems: "center",
  display: "flex",
  lineHeight: 1
}), Text = "span", Icon = styled.div(_ref => {
  let checked = _ref.checked, isDisabled = _ref.isDisabled, isFocus = _ref.isFocus, isActive = _ref.isActive, isHover = _ref.isHover, bg = theme.colors.N10;
  isDisabled && checked ? bg = theme.colors.B.D20 : isActive ? bg = checked ? theme.colors.B.D10 : theme.colors.N20 : !isFocus && !isHover || checked ? checked && (bg = theme.colors.B.base) : bg = theme.colors.N15;
  let fill = "white";
  isDisabled && checked ? fill = theme.colors.N70 : checked || (fill = "transparent");
  let innerStroke = isFocus ? theme.colors.B.L20 : bg;
  checked && (innerStroke = isActive ? theme.colors.B.D20 : theme.colors.B.base);
  let outerStroke = "transparent", outerStrokeWidth = 1;
  return isFocus && !isActive && (outerStroke = theme.colors.B.A20, outerStrokeWidth = 5), 
  {
    color: bg,
    fill: fill,
    lineHeight: 0,
    "& .outer-stroke": {
      transition: "stroke 0.2s ease-in-out",
      stroke: outerStroke,
      strokeWidth: outerStrokeWidth
    },
    "& .inner-stroke": {
      stroke: innerStroke,
      strokeWidth: 1
    }
  };
}), defaultComponents = {
  Wrapper: Wrapper,
  Label: Label,
  Text: Text
};

class Control extends React.Component {
  constructor() {
    super(...arguments), _defineProperty(this, "control", void 0), _defineProperty(this, "cacheComponents", memoize(components => _objectSpread({}, defaultComponents, components))), 
    _defineProperty(this, "getRef", ref => {
      this.control = ref;
    });
  }
  focus() {
    this.control && this.control.focus();
  }
  blur() {
    this.control && this.control.blur();
  }
  render() {
    const _this$props = this.props, checked = _this$props.checked, children = _this$props.children, isDisabled = _this$props.isDisabled, isRequired = _this$props.isRequired, name = _this$props.name, onChange = _this$props.onChange, svg = _this$props.svg, tabIndex = _this$props.tabIndex, type = _this$props.type, value = _this$props.value, wrapperProps = _objectWithoutProperties(_this$props, [ "checked", "children", "isDisabled", "isRequired", "name", "onChange", "svg", "tabIndex", "type", "value" ]), components = this.cacheComponents(this.props.components);
    return React__default.createElement(components.Wrapper, wrapperProps, React__default.createElement(reactPseudoState.PseudoState, null, (_ref2, snapshot) => {
      let onBlur = _ref2.onBlur, onFocus = _ref2.onFocus, onKeyDown = _ref2.onKeyDown, onKeyUp = _ref2.onKeyUp, onMouseDown = _ref2.onMouseDown, onMouseEnter = _ref2.onMouseEnter, onMouseLeave = _ref2.onMouseLeave;
      const labelHandlers = {
        onMouseDown: onMouseDown,
        onMouseUp: _ref2.onMouseUp,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onTouchEnd: _ref2.onTouchEnd,
        onTouchStart: _ref2.onTouchStart
      }, inputHandlers = {
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp
      }, iconProps = _objectSpread({}, snapshot, {
        checked: checked,
        isDisabled: isDisabled
      });
      return React__default.createElement(components.Label, _extends({
        isChecked: checked,
        isDisabled: isDisabled
      }, labelHandlers), React__default.createElement(input.HiddenInput, _extends({}, inputHandlers, {
        checked: checked,
        disabled: isDisabled,
        innerRef: this.getRef,
        name: name,
        required: isRequired,
        tabIndex: tabIndex || checked ? "0" : "-1",
        type: type,
        value: value
      })), React__default.createElement(Icon, iconProps, React__default.createElement(Svg, {
        html: svg
      })), children ? React__default.createElement(components.Text, null, children) : null);
    }));
  }
}

_defineProperty(Control, "defaultProps", {
  checked: !1,
  components: {},
  isDisabled: !1
});

const Svg = _ref3 => {
  let html = _ref3.html, props = _objectWithoutProperties(_ref3, [ "html" ]);
  return React__default.createElement("svg", _extends({
    dangerouslySetInnerHTML: {
      __html: html
    },
    focusable: "false",
    height: "24",
    role: "presentation",
    viewBox: "0 0 24 24",
    width: "24"
  }, props));
}, CheckboxPrimitive = _ref => {
  let innerRef = _ref.innerRef, props = _objectWithoutProperties(_ref, [ "innerRef" ]);
  return React.createElement(Control, _extends({
    ref: innerRef,
    svg: '<g fillRule="evenodd">\n        <rect class="outer-stroke" fill="transparent" x="6" y="6" width="12" height="12" rx="2" />\n        <rect class="inner-stroke" fill="currentColor" x="6" y="6" width="12" height="12" rx="2" />\n        <path\n          d="M9.707 11.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 1 0-1.414-1.414L11 12.586l-1.293-1.293z"\n          fill="inherit"\n        />\n      </g>',
    type: "checkbox"
  }, props));
}, RadioPrimitive = _ref2 => {
  let innerRef = _ref2.innerRef, props = _objectWithoutProperties(_ref2, [ "innerRef" ]);
  return React.createElement(Control, _extends({
    ref: innerRef,
    svg: '<g fillRule="evenodd">\n      <circle class="outer-stroke" fill="transparent" cx="12" cy="12" r="7" />\n      <circle class="inner-stroke" fill="currentColor" cx="12" cy="12" r="7" />\n      <circle fill="inherit" cx="12" cy="12" r="2" />\n    </g>',
    type: "radio"
  }, props));
}, Checkbox = props => React__default.createElement(reactRadios.Checkbox, _extends({
  component: CheckboxPrimitive
}, props)), CheckboxGroup = props => React__default.createElement(reactRadios.CheckboxGroup, props), Radio = props => React__default.createElement(reactRadios.Radio, _extends({
  component: RadioPrimitive
}, props)), RadioGroup = props => React__default.createElement(reactRadios.RadioGroup, props);

exports.Checkbox = Checkbox, exports.CheckboxGroup = CheckboxGroup, exports.CheckboxPrimitive = CheckboxPrimitive, 
exports.Radio = Radio, exports.RadioGroup = RadioGroup, exports.RadioPrimitive = RadioPrimitive;
