"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), react = require("react"), core = require("@emotion/core"), styled = _interopDefault(require("@emotion/styled")), loading = require("@arch-ui/loading"), _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), reactRouterDom = require("react-router-dom"), reactPseudoState = require("react-pseudo-state"), theme = require("@arch-ui/theme"), common = require("@arch-ui/common"), colorUtils = require("@arch-ui/color-utils");

const boldAppearance = {
  default: {
    bg: "#fff",
    border: theme.colors.N20,
    focusRing: theme.colors.primary,
    text: theme.colors.text
  },
  primary: {
    bg: theme.colors.primary,
    border: theme.colors.primary,
    text: "#fff"
  },
  create: {
    bg: theme.colors.create,
    border: theme.colors.create,
    text: "#fff"
  },
  danger: {
    bg: theme.colors.danger,
    border: theme.colors.danger,
    text: "#fff"
  },
  warning: {
    bg: theme.colors.warning,
    border: theme.colors.warning,
    text: "#fff"
  }
}, ghostAppearance = {
  default: {
    border: theme.colors.N20,
    text: theme.colors.N60
  },
  primary: {
    border: theme.colors.B.L50,
    text: theme.colors.primary
  },
  create: {
    border: theme.colors.G.L50,
    text: theme.colors.create
  },
  danger: {
    border: theme.colors.R.L50,
    text: theme.colors.danger
  },
  warning: {
    border: theme.colors.Y.L30,
    text: theme.colors.warning
  }
}, subtleAppearance = {
  default: {
    text: theme.colors.N40,
    textHover: theme.colors.text
  },
  primary: {
    text: theme.colors.N40,
    textHover: theme.colors.primary
  },
  warning: {
    text: theme.colors.N40,
    textHover: theme.colors.danger
  },
  danger: {
    text: theme.colors.danger,
    textHover: theme.colors.danger
  }
}, nuanceAppearance = {
  default: {
    text: theme.colors.text
  },
  primary: {
    text: theme.colors.primary
  },
  warning: {
    text: theme.colors.danger
  },
  danger: {
    text: theme.colors.danger
  }
};

function makeSubtleVariant(_ref) {
  let appearance = _ref.appearance;
  const _subtleAppearance$app = subtleAppearance[appearance];
  return {
    color: _subtleAppearance$app.text,
    fontWeight: null,
    ":hover, :focus": {
      color: _subtleAppearance$app.textHover,
      textDecoration: "underline"
    }
  };
}

function makeNuanceVariant(_ref2) {
  let appearance = _ref2.appearance, isDisabled = _ref2.isDisabled;
  return {
    color: nuanceAppearance[appearance].text,
    fontWeight: "normal",
    ":hover, :focus": makeGhostVariant({
      appearance: appearance,
      isDisabled: isDisabled
    })
  };
}

function makeGhostVariant(_ref3) {
  let appearance = _ref3.appearance, isDisabled = _ref3.isDisabled;
  const _ghostAppearance$appe = ghostAppearance[appearance], border = _ghostAppearance$appe.border, text = _ghostAppearance$appe.text;
  return {
    border: "1px solid",
    borderColor: border,
    color: text,
    fontWeight: "normal",
    opacity: isDisabled ? .5 : null,
    ":hover, :focus": {
      backgroundColor: colorUtils.alpha(border, .1),
      borderColor: colorUtils.darken(border, 10)
    },
    ":active": {
      color: colorUtils.darken(text, 10),
      borderColor: colorUtils.darken(border, 20),
      backgroundColor: colorUtils.alpha(border, .2)
    }
  };
}

function makeBoldVariant(_ref4) {
  let appearance = _ref4.appearance, isDisabled = _ref4.isDisabled, isActive = _ref4.isActive, isHover = _ref4.isHover, isFocus = _ref4.isFocus, isSelected = _ref4.isSelected;
  const _boldAppearance$appea = boldAppearance[appearance], bg = _boldAppearance$appea.bg, border = _boldAppearance$appea.border, focusRing = _boldAppearance$appea.focusRing, text = _boldAppearance$appea.text, activeBg = "default" === appearance ? theme.colors.N10 : colorUtils.darken(bg, 12), hoverAndFocus = isHover || isFocus ? {
    borderColor: border,
    background: bg
  } : null, hoverStyles = isHover ? _objectSpread({}, hoverAndFocus, {
    boxShadow: "0 1px 2px rgba(0, 0, 0, 0.12)"
  }) : null, focusStyles = isFocus && !isDisabled ? _objectSpread({}, hoverAndFocus, {
    borderColor: focusRing,
    boxShadow: "0 0 0 3px ".concat(colorUtils.alpha(focusRing || bg, .2))
  }) : null;
  return _objectSpread({
    backgroundColor: bg,
    backgroundRepeat: "repeat-x",
    borderColor: border,
    color: text,
    fontWeight: "bold"
  }, hoverStyles, focusStyles, isActive || isSelected ? {
    background: activeBg,
    borderColor: border
  } : null);
}

const SPACING_OPTION = {
  comfortable: "".concat(theme.gridSize, "px ").concat(1.5 * theme.gridSize, "px"),
  cozy: "2px 6px",
  cramped: "1px 2px"
};

function makeVariant(_ref) {
  let variantStyles, appearance = _ref.appearance, isActive = _ref.isActive, isBlock = _ref.isBlock, isHover = _ref.isHover, isFocus = _ref.isFocus, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, variant = _ref.variant, spacing = _ref.spacing;
  const config = {
    appearance: appearance,
    isDisabled: isDisabled,
    isActive: isActive,
    isHover: isHover,
    isFocus: isFocus,
    isSelected: isSelected
  };
  return "subtle" === variant ? variantStyles = makeSubtleVariant(config) : "nuance" === variant ? variantStyles = makeNuanceVariant(config) : "bold" === variant ? variantStyles = makeBoldVariant(config) : "ghost" === variant && (variantStyles = makeGhostVariant(config)), 
  _objectSpread({}, common.uniformHeight, {
    cursor: isDisabled ? "default" : "pointer",
    display: isBlock ? "block" : "inline-block",
    opacity: isDisabled ? .66 : null,
    outline: 0,
    padding: SPACING_OPTION[spacing],
    pointerEvents: isDisabled ? "none" : null,
    textAlign: "center",
    touchAction: "manipulation",
    userSelect: "none",
    width: isBlock ? "100%" : null,
    ":hover": {
      textDecoration: "none"
    }
  }, variantStyles);
}

const ButtonElement = react.forwardRef((props, ref) => {
  const isDisabled = props.isDisabled, rest = (props.isActive, props.isFocus, props.isHover, 
  props.isSelected, props.focusOrigin, _objectWithoutProperties(props, [ "isDisabled", "isActive", "isFocus", "isHover", "isSelected", "focusOrigin" ])), variant = makeVariant(props);
  return rest.to ? core.jsx(reactRouterDom.Link, _extends({
    innerRef: ref,
    css: variant
  }, rest)) : rest.href ? core.jsx("a", _extends({
    css: variant
  }, rest, {
    ref: ref
  })) : core.jsx("button", _extends({
    type: "button",
    disabled: isDisabled,
    css: variant
  }, rest, {
    ref: ref
  }));
});

ButtonElement.defaultProps = {
  appearance: "default",
  spacing: "comfortable",
  variant: "bold"
};

const Button = reactPseudoState.withPseudoState(ButtonElement), LoadingButtonInner = styled.div({
  position: "relative"
}), LoadingIndicatorWrapper = styled.div({
  left: "50%",
  position: "absolute",
  top: "50%",
  transform: "translate(-50%, -50%)"
});

function getAppearance(appearance) {
  return "default" === appearance ? "dark" : "inverted";
}

const LoadingButton = react.forwardRef((_ref, ref) => {
  let children = _ref.children, indicatorVariant = _ref.indicatorVariant, isLoading = _ref.isLoading, props = _objectWithoutProperties(_ref, [ "children", "indicatorVariant", "isLoading" ]);
  const appearance = getAppearance(props.appearance), textCSS = isLoading ? {
    visibility: "hidden"
  } : null, isSpinner = "spinner" === indicatorVariant;
  return core.jsx(Button, _extends({
    ref: ref
  }, props), core.jsx(LoadingButtonInner, null, isLoading ? core.jsx(LoadingIndicatorWrapper, null, isSpinner ? core.jsx(loading.LoadingSpinner, {
    appearance: appearance,
    size: 16
  }) : core.jsx(loading.LoadingIndicator, {
    appearance: appearance,
    size: 4
  })) : null, core.jsx("span", {
    css: textCSS
  }, children)));
});

LoadingButton.defaultProps = {
  appearance: "default",
  isLoading: !1,
  variant: "bold",
  indicatorVariant: "dots"
};

const IconButton = react.forwardRef((_ref, ref) => {
  let children = _ref.children, Icon = _ref.icon, _ref$iconSize = _ref.iconSize, iconSize = void 0 === _ref$iconSize ? 16 : _ref$iconSize, props = _objectWithoutProperties(_ref, [ "children", "icon", "iconSize" ]);
  return core.jsx(Button, _extends({
    ref: ref
  }, props), core.jsx("span", {
    css: {
      display: "flex",
      alignItems: "center"
    }
  }, core.jsx(Icon, {
    css: children ? {
      height: iconSize,
      width: iconSize,
      marginRight: "0.5em"
    } : null
  }), children));
});

exports.LoadingButton = LoadingButton, exports.IconButton = IconButton, exports.Button = Button;
