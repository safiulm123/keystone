'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

var _taggedTemplateLiteral = _interopDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var React = _interopDefault(require('react'));

var styled = _interopDefault(require('@emotion/styled'));

var core = require('@emotion/core');

var theme = require('@arch-ui/theme');

var typography = require('@arch-ui/typography');

function _templateObject2() {
  const data = _taggedTemplateLiteral(["to { transform: rotate(1turn); }"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["0%, 80%, 100% { opacity: 0; } 40% { opacity: 1; }"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
} // Dots
// ==============================


const fadeAnim = core.keyframes(_templateObject());
const appearanceColor = {
  default: theme.colors.N20,
  dark: theme.colors.text,
  primary: theme.colors.primary,
  inverted: 'white'
}; // NOTE should be able to use $Keys<typeof appearanceColor>;

const DotsContainer = styled.div(_ref => {
  let size = _ref.size;
  return {
    alignSelf: 'center',
    fontSize: size,
    lineHeight: 1,
    textAlign: 'center',
    verticalAlign: 'middle',
    display: 'inline-flex'
  };
});
const Dot = styled.span(_ref2 => {
  let appearance = _ref2.appearance,
      _ref2$delay = _ref2.delay,
      delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
      isOffset = _ref2.isOffset;
  return {
    animation: "".concat(fadeAnim, " 1s infinite ").concat(delay, "ms"),
    animationTimingFunction: 'ease-in-out',
    backgroundColor: appearanceColor[appearance],
    borderRadius: '1em',
    display: 'inline-block',
    height: '1em',
    marginLeft: isOffset ? '1em' : null,
    verticalAlign: 'top',
    width: '1em'
  };
});

const LoadingIndicator = _ref3 => {
  let appearance = _ref3.appearance,
      size = _ref3.size;
  return React.createElement(DotsContainer, {
    size: size
  }, React.createElement(Dot, {
    appearance: appearance
  }), React.createElement(Dot, {
    appearance: appearance,
    delay: 160,
    isOffset: true
  }), React.createElement(Dot, {
    appearance: appearance,
    delay: 320,
    isOffset: true
  }), React.createElement(typography.A11yText, null, "Loading"));
};

LoadingIndicator.defaultProps = {
  appearance: 'default',
  size: 4
}; // ==============================
// Spinner
// ==============================

const spinAnim = core.keyframes(_templateObject2());

const spinnerCommon = _ref4 => {
  let size = _ref4.size;
  return {
    borderRadius: '50%',
    borderStyle: 'solid',
    borderWidth: size / 8,
    boxSizing: 'border-box',
    height: size,
    width: size
  };
};

const SpinnerWrapper = styled.div(_ref5 => {
  let size = _ref5.size;
  return {
    height: size,
    width: size,
    position: 'relative'
  };
});
const SpinnerOrbit = styled.div(_ref6 => {
  let color = _ref6.color,
      size = _ref6.size;
  return _objectSpread({}, spinnerCommon({
    size
  }), {
    borderColor: color,
    opacity: 0.2,
    position: 'relative'
  });
});
const SpinnerSatellite = styled.div(_ref7 => {
  let color = _ref7.color,
      size = _ref7.size;
  return _objectSpread({}, spinnerCommon({
    size
  }), {
    animation: "".concat(spinAnim, " 1s linear infinite"),
    borderColor: "".concat(color, " transparent transparent"),
    left: 0,
    position: 'absolute',
    top: 0
  });
});

const LoadingSpinner = _ref8 => {
  let appearance = _ref8.appearance,
      size = _ref8.size;
  const color = appearanceColor[appearance];
  return React.createElement(SpinnerWrapper, null, React.createElement(SpinnerOrbit, {
    color: color,
    size: size
  }), React.createElement(SpinnerSatellite, {
    color: color,
    size: size
  }), React.createElement(typography.A11yText, null, "Loading"));
};

LoadingSpinner.defaultProps = {
  appearance: 'default',
  size: 16
};
exports.LoadingIndicator = LoadingIndicator;
exports.LoadingSpinner = LoadingSpinner;
