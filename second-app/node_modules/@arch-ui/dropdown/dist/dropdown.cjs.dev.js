'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var react = require('react');

var reactRouterDom = require('react-router-dom');

var reactDom = require('react-dom');

var styled = _interopDefault(require('@emotion/styled'));

var core = require('@emotion/core');

var theme = require('@arch-ui/theme');

var reactFocusMarshal = require('react-focus-marshal');

var modalUtils = require('@arch-ui/modal-utils');

const ItemElement = props => {
  if (props.to) return core.jsx(reactRouterDom.Link, props);
  if (props.href) return core.jsx("a", props);
  return core.jsx("button", _extends({
    type: "button"
  }, props));
};

const ItemInner = _ref => {
  let children = _ref.children,
      icon = _ref.icon;
  return icon ? core.jsx("div", {
    css: {
      alignItems: 'center',
      display: 'flex',
      lineHeight: 1
    }
  }, core.jsx("div", {
    key: "icon",
    css: {
      marginRight: theme.gridSize,
      width: 16,
      textAlign: 'center'
    }
  }, icon), core.jsx("div", {
    key: "children",
    css: {
      flex: 1
    }
  }, children)) : children;
};

const Item = _ref2 => {
  let children = _ref2.children,
      icon = _ref2.icon,
      isDisabled = _ref2.isDisabled,
      props = _objectWithoutProperties(_ref2, ["children", "icon", "isDisabled"]);

  return core.jsx(ItemElement, _extends({
    disabled: isDisabled,
    css: {
      appearance: 'none',
      background: 'none',
      border: '1px solid transparent',
      boxSizing: 'border-box',
      color: isDisabled ? theme.colors.N40 : theme.colors.text,
      cursor: 'pointer',
      display: 'block',
      fontSize: 14,
      lineHeight: '17px',
      margin: 0,
      padding: "".concat(theme.gridSize, "px ").concat(theme.gridSize * 1.5, "px"),
      pointerEvents: isDisabled ? 'none' : null,
      textAlign: 'left',
      transition: 'box-shadow 100ms linear',
      verticalAlign: 'middle',
      whiteSpace: 'nowrap',
      width: '100%',
      '&:hover, &:focus': {
        backgroundColor: theme.colors.B.L90,
        color: theme.colors.primary,
        outline: 0,
        textDecoration: 'none'
      }
    }
  }, props), core.jsx(ItemInner, {
    icon: icon
  }, children));
};

const Menu = styled.div(_ref3 => {
  let left = _ref3.left,
      top = _ref3.top;
  const placementStyles = {
    left,
    top
  };
  return _objectSpread({
    backgroundColor: 'white',
    borderRadius: theme.borderRadius,
    boxShadow: theme.shadows[2],
    marginTop: theme.gridSize,
    minWidth: 160,
    paddingBottom: theme.gridSize / 2,
    paddingTop: theme.gridSize / 2,
    position: 'absolute',
    zIndex: 2
  }, placementStyles);
});

function focus(el) {
  if (el && el instanceof HTMLElement && typeof el.focus === 'function') {
    el.focus();
  }
}

class Dropdown extends react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "menu", void 0);

    _defineProperty(this, "lastHover", void 0);

    _defineProperty(this, "state", {
      leftOffset: 0,
      topOffset: 0
    });

    _defineProperty(this, "handleItemClick", _ref4 => {
      let onClick = _ref4.onClick,
          data = _objectWithoutProperties(_ref4, ["onClick"]);

      return event => {
        const _this$props = this.props,
              close = _this$props.close,
              selectClosesMenu = _this$props.selectClosesMenu;
        if (selectClosesMenu) close(event);
        if (onClick) onClick({
          event,
          data
        });
      };
    });

    _defineProperty(this, "handleKeyDown", event => {
      const key = event.key,
            target = event.target; // appease flow

      if (!(target instanceof HTMLElement)) return; // bail on unused keys

      if (['ArrowUp', 'ArrowDown', 'PageUp', 'PageDown'].indexOf(key) === -1) {
        return;
      } // kill scroll that occurs on arrow/page key press


      event.preventDefault(); // prep shorthand key/node helpers

      const isArrowUp = key === 'ArrowUp';
      const isArrowDown = key === 'ArrowDown';
      const isPageUp = key === 'PageUp';
      const isPageDown = key === 'PageDown';
      const firstItem = this.menu.firstChild;
      const lastItem = this.menu.lastChild;
      const previousItem = target.previousSibling;
      const nextItem = target.nextSibling; // typical item traversal

      if (isArrowUp) focus(previousItem);
      if (isArrowDown) focus(nextItem);
      if (isPageUp) focus(firstItem);
      if (isPageDown) focus(lastItem); // support looping

      if (target === firstItem && isArrowUp) focus(lastItem);
      if (target === lastItem && isArrowDown) focus(firstItem);
    });

    _defineProperty(this, "handleMouseEnter", _ref5 => {
      let target = _ref5.target;

      if (target instanceof HTMLElement) {
        this.lastHover = target;
      }

      if (document.activeElement) {
        document.activeElement.blur();
      }
    });

    _defineProperty(this, "handleMenuLeave", () => {
      focus(this.lastHover);
    });

    _defineProperty(this, "getMenu", ref => {
      if (ref !== null) {
        this.menu = ref;
        this.props.getModalRef(ref);
      }
    });

    _defineProperty(this, "calculatePosition", () => {
      const _this$props2 = this.props,
            align = _this$props2.align,
            mode = _this$props2.mode,
            mouseCoords = _this$props2.mouseCoords,
            targetNode = _this$props2.targetNode;
      if (!targetNode || !document.body) return;
      const bodyRect = document.body.getBoundingClientRect();
      const targetRect = targetNode.getBoundingClientRect();
      const menuHeight = this.menu.clientHeight;
      const menuWidth = this.menu.clientWidth;
      let leftOffset = 0;
      let topOffset = 0; // ------------------------------
      // click menu
      // ------------------------------

      if (mode === 'click') {
        leftOffset = align === 'left' ? targetRect.left : targetRect.right - menuWidth;
        topOffset = targetRect.bottom - bodyRect.top;
        this.setState({
          leftOffset,
          topOffset
        });
        return;
      } // ------------------------------
      // context menu
      // ------------------------------


      const clientX = mouseCoords.clientX,
            clientY = mouseCoords.clientY;
      const screen = {
        w: window.innerWidth,
        h: window.innerHeight
      };
      const right = screen.w - clientX > menuWidth;
      const left = !right;
      const top = screen.h - clientY > menuHeight;
      const bottom = !top;
      if (right) leftOffset = clientX;
      if (left) leftOffset = clientX - menuWidth;
      if (top) topOffset = clientY - bodyRect.top;
      if (bottom) topOffset = clientY - bodyRect.top - menuHeight;
      this.setState({
        leftOffset,
        topOffset
      });
    });
  }

  componentDidMount() {
    this.calculatePosition();
    document.addEventListener('keydown', this.handleKeyDown, false);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown, false);
  }

  render() {
    const _this$props3 = this.props,
          items = _this$props3.items,
          style = _this$props3.style;
    const _this$state = this.state,
          leftOffset = _this$state.leftOffset,
          topOffset = _this$state.topOffset;
    const attachTo = document.body;

    if (attachTo) {
      return reactDom.createPortal(core.jsx(reactFocusMarshal.FocusTrap, {
        options: {
          clickOutsideDeactivates: true
        }
      }, core.jsx(Menu, {
        left: leftOffset,
        onMouseLeave: this.handleMenuLeave,
        ref: this.getMenu,
        style: style,
        top: topOffset
      }, items.map((item, idx) => {
        const content = item.content,
              rest = _objectWithoutProperties(item, ["content"]);

        return core.jsx(Item, _extends({}, rest, {
          onClick: this.handleItemClick(item),
          onMouseEnter: this.handleMouseEnter,
          key: idx
        }), content);
      }))), attachTo);
    } else {
      return null;
    }
  }

}

_defineProperty(Dropdown, "defaultProps", {
  align: 'left',
  selectClosesMenu: true
});

var index = modalUtils.withModalHandlers(Dropdown, {
  transition: modalUtils.slideDown
});
exports.default = index;
