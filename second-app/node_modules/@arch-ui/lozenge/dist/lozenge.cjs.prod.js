"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), styled = _interopDefault(require("@emotion/styled")), theme = require("@arch-ui/theme");

const boldBackgroundColor = {
  default: theme.colors.N60,
  primary: theme.colors.primary,
  danger: theme.colors.danger,
  create: theme.colors.create,
  warning: theme.colors.warning
}, boldTextColor = {
  default: "white",
  primary: "white",
  danger: "white",
  create: "white",
  warning: "white"
}, subtleBackgroundColor = {
  default: theme.colors.N05,
  primary: theme.colors.B.L90,
  danger: theme.colors.R.L90,
  create: theme.colors.G.L90,
  warning: theme.colors.Y.L90
}, subtleBorderColor = {
  default: theme.colors.N10,
  primary: theme.colors.B.L80,
  danger: theme.colors.R.L80,
  create: theme.colors.G.L80,
  warning: theme.colors.Y.L80
}, subtleTextColor = {
  default: theme.colors.N50,
  primary: theme.colors.B.L30,
  danger: theme.colors.R.L30,
  create: theme.colors.G.L30,
  warning: theme.colors.Y.L30
}, Lozenge = styled.div(_ref => {
  let appearance = _ref.appearance, variant = _ref.variant, crop = _ref.crop;
  const isClipRight = "right" === crop, cropStyles = crop ? {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    direction: isClipRight ? "rtl" : null,
    textAlign: isClipRight ? "left" : null
  } : null;
  return _objectSpread({
    border: "1px solid transparent",
    backgroundColor: "bold" === variant ? boldBackgroundColor[appearance] : subtleBackgroundColor[appearance],
    borderColor: "bold" === variant ? null : subtleBorderColor[appearance],
    boxSizing: "border-box",
    color: "bold" === variant ? boldTextColor[appearance] : subtleTextColor[appearance],
    borderRadius: theme.borderRadius,
    display: "inline-block",
    fontSize: "0.85em",
    maxWidth: "100%",
    minWidth: 1,
    padding: "".concat(theme.gridSize / 2, "px ").concat(theme.gridSize, "px")
  }, cropStyles);
});

Lozenge.defaultProps = {
  appearance: "default",
  variant: "subtle"
}, exports.Lozenge = Lozenge;
