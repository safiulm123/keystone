import _extends from '@babel/runtime/helpers/esm/extends';
import React__default, { Component, createElement } from 'react';
import { Checkbox as Checkbox$1, CheckboxGroup as CheckboxGroup$1, Radio as Radio$1, RadioGroup as RadioGroup$1 } from 'react-radios';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import memoize from 'memoize-one';
import { PseudoState } from 'react-pseudo-state';
import styled from '@emotion/styled';
import { colors } from '@arch-ui/theme';
import { HiddenInput } from '@arch-ui/input';

const Wrapper = styled.div({
  display: 'flex',
  alignItems: 'center'
});
const Label = styled.label({
  alignItems: 'center',
  display: 'flex',
  lineHeight: 1
});
const Text = 'span';
const Icon = styled.div((_ref) => {
  let checked = _ref.checked,
      isDisabled = _ref.isDisabled,
      isFocus = _ref.isFocus,
      isActive = _ref.isActive,
      isHover = _ref.isHover;
  // background
  let bg = colors.N10;

  if (isDisabled && checked) {
    bg = colors.B.D20;
  } else if (isActive) {
    bg = checked ? colors.B.D10 : colors.N20;
  } else if ((isFocus || isHover) && !checked) {
    bg = colors.N15;
  } else if (checked) {
    bg = colors.B.base;
  } // fill


  let fill = 'white';

  if (isDisabled && checked) {
    fill = colors.N70;
  } else if (!checked) {
    fill = 'transparent';
  } // stroke


  let innerStroke = isFocus ? colors.B.L20 : bg;
  let innerStrokeWidth = 1;

  if (checked) {
    innerStroke = isActive ? colors.B.D20 : colors.B.base;
  }

  let outerStroke = 'transparent';
  let outerStrokeWidth = 1;

  if (isFocus && !isActive) {
    outerStroke = colors.B.A20;
    outerStrokeWidth = 5;
  }

  return {
    color: bg,
    fill,
    lineHeight: 0,
    // awkwardly apply the focus ring
    '& .outer-stroke': {
      transition: 'stroke 0.2s ease-in-out',
      stroke: outerStroke,
      strokeWidth: outerStrokeWidth
    },
    '& .inner-stroke': {
      stroke: innerStroke,
      strokeWidth: innerStrokeWidth
    }
  };
});
const defaultComponents = {
  Wrapper,
  Label,
  Text
};
class Control extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "control", void 0);

    _defineProperty(this, "cacheComponents", memoize(components => _objectSpread({}, defaultComponents, components)));

    _defineProperty(this, "getRef", ref => {
      this.control = ref;
    });
  }

  focus() {
    if (this.control) this.control.focus();
  }

  blur() {
    if (this.control) this.control.blur();
  }

  render() {
    const _this$props = this.props,
          checked = _this$props.checked,
          children = _this$props.children,
          isDisabled = _this$props.isDisabled,
          isRequired = _this$props.isRequired,
          name = _this$props.name,
          onChange = _this$props.onChange,
          svg = _this$props.svg,
          tabIndex = _this$props.tabIndex,
          type = _this$props.type,
          value = _this$props.value,
          wrapperProps = _objectWithoutProperties(_this$props, ["checked", "children", "isDisabled", "isRequired", "name", "onChange", "svg", "tabIndex", "type", "value"]);

    const components = this.cacheComponents(this.props.components);
    return React__default.createElement(components.Wrapper, wrapperProps, React__default.createElement(PseudoState, null, (_ref2, snapshot) => {
      let onBlur = _ref2.onBlur,
          onFocus = _ref2.onFocus,
          onKeyDown = _ref2.onKeyDown,
          onKeyUp = _ref2.onKeyUp,
          onMouseDown = _ref2.onMouseDown,
          onMouseEnter = _ref2.onMouseEnter,
          onMouseLeave = _ref2.onMouseLeave,
          onMouseUp = _ref2.onMouseUp,
          onTouchEnd = _ref2.onTouchEnd,
          onTouchStart = _ref2.onTouchStart;
      const labelHandlers = {
        onMouseDown,
        onMouseUp,
        onMouseEnter,
        onMouseLeave,
        onTouchEnd,
        onTouchStart
      };
      const inputHandlers = {
        onBlur,
        onChange,
        onFocus,
        onKeyDown,
        onKeyUp
      };

      const iconProps = _objectSpread({}, snapshot, {
        checked,
        isDisabled
      });

      return React__default.createElement(components.Label, _extends({
        isChecked: checked,
        isDisabled: isDisabled
      }, labelHandlers), React__default.createElement(HiddenInput, _extends({}, inputHandlers, {
        checked: checked,
        disabled: isDisabled,
        innerRef: this.getRef,
        name: name,
        required: isRequired,
        tabIndex: tabIndex || checked ? '0' : '-1',
        type: type,
        value: value
      })), React__default.createElement(Icon, iconProps, React__default.createElement(Svg, {
        html: svg
      })), children ? React__default.createElement(components.Text, null, children) : null);
    }));
  }

}

_defineProperty(Control, "defaultProps", {
  checked: false,
  components: {},
  isDisabled: false
});

const Svg = (_ref3) => {
  let html = _ref3.html,
      props = _objectWithoutProperties(_ref3, ["html"]);

  return React__default.createElement("svg", _extends({
    dangerouslySetInnerHTML: {
      __html: html
    },
    focusable: "false",
    height: "24",
    role: "presentation",
    viewBox: "0 0 24 24",
    width: "24"
  }, props));
};

const CheckboxPrimitive = (_ref) => {
  let innerRef = _ref.innerRef,
      props = _objectWithoutProperties(_ref, ["innerRef"]);

  return createElement(Control, _extends({
    ref: innerRef,
    svg: "<g fillRule=\"evenodd\">\n        <rect class=\"outer-stroke\" fill=\"transparent\" x=\"6\" y=\"6\" width=\"12\" height=\"12\" rx=\"2\" />\n        <rect class=\"inner-stroke\" fill=\"currentColor\" x=\"6\" y=\"6\" width=\"12\" height=\"12\" rx=\"2\" />\n        <path\n          d=\"M9.707 11.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 1 0-1.414-1.414L11 12.586l-1.293-1.293z\"\n          fill=\"inherit\"\n        />\n      </g>",
    type: "checkbox"
  }, props));
};
const RadioPrimitive = (_ref2) => {
  let innerRef = _ref2.innerRef,
      props = _objectWithoutProperties(_ref2, ["innerRef"]);

  return createElement(Control, _extends({
    ref: innerRef,
    svg: "<g fillRule=\"evenodd\">\n      <circle class=\"outer-stroke\" fill=\"transparent\" cx=\"12\" cy=\"12\" r=\"7\" />\n      <circle class=\"inner-stroke\" fill=\"currentColor\" cx=\"12\" cy=\"12\" r=\"7\" />\n      <circle fill=\"inherit\" cx=\"12\" cy=\"12\" r=\"2\" />\n    </g>",
    type: "radio"
  }, props));
};

const Checkbox = props => React__default.createElement(Checkbox$1, _extends({
  component: CheckboxPrimitive
}, props));
const CheckboxGroup = props => React__default.createElement(CheckboxGroup$1, props);
const Radio = props => React__default.createElement(Radio$1, _extends({
  component: RadioPrimitive
}, props));
const RadioGroup = props => React__default.createElement(RadioGroup$1, props);

export { Checkbox, CheckboxGroup, CheckboxPrimitive, Radio, RadioGroup, RadioPrimitive };
