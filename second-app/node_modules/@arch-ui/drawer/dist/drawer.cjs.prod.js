"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), core = require("@emotion/core"), react = require("react"), reactDom = require("react-dom"), styled = _interopDefault(require("@emotion/styled")), ScrollLock = _interopDefault(require("react-scrolllock")), reactFocusMarshal = require("react-focus-marshal"), modalUtils = require("@arch-ui/modal-utils"), theme = require("@arch-ui/theme"), colorUtils = require("@arch-ui/color-utils"), typography = require("@arch-ui/typography"), _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray"));

let allStackConsumers = {
  left: [],
  right: []
}, updateStackConsumers = slideInFrom => {
  allStackConsumers[slideInFrom].forEach(update => {
    update();
  });
};

function useStackIndex(isOpen, slideInFrom) {
  let _useState = react.useState(isOpen ? 0 : -1), _useState2 = _slicedToArray(_useState, 2), stackIndex = _useState2[0], setStackIndex = _useState2[1];
  return react.useLayoutEffect(() => {
    if (isOpen) {
      let update = () => {
        setStackIndex(allStackConsumers[slideInFrom].indexOf(update));
      };
      return allStackConsumers[slideInFrom].unshift(update), updateStackConsumers(slideInFrom), 
      () => {
        allStackConsumers[slideInFrom] = allStackConsumers[slideInFrom].filter(x => x !== update), 
        updateStackConsumers(slideInFrom);
      };
    }
    setStackIndex(-1);
  }, [ isOpen, slideInFrom ]), stackIndex;
}

const innerGutter = 2 * theme.gridSize, Positioner = _ref => {
  let slideInFrom = _ref.slideInFrom, width = _ref.width, stackIndex = _ref.stackIndex, _ref$style = _ref.style, transform = _ref$style.transform, style = _objectWithoutProperties(_ref$style, [ "transform" ]), props = _objectWithoutProperties(_ref, [ "slideInFrom", "width", "stackIndex", "style" ]);
  const stackTransforms = stackIndex <= 0 ? [] : [ "translate(calc(".concat(.3 * stackIndex, " * -9vw))"), "scale(".concat(1 - stackIndex / 50, ")") ];
  return core.jsx("div", _extends({
    css: _objectSpread({
      boxSizing: "border-box",
      padding: theme.gridSize,
      display: "flex",
      flexDirection: "column",
      height: "100%",
      maxWidth: "90%",
      position: "fixed",
      [slideInFrom]: 0,
      top: 0,
      width: width,
      zIndex: 2,
      transform: "".concat(transform).concat(stackTransforms.join(" "))
    }, style)
  }, props));
}, Dialog = react.forwardRef((_ref2, ref) => {
  let Tag = _ref2.component, props = _objectWithoutProperties(_ref2, [ "component" ]);
  return core.jsx(Tag, _extends({
    ref: ref,
    role: "dialog",
    css: {
      backgroundColor: "white",
      boxShadow: theme.shadows[3],
      borderRadius: 2 * theme.borderRadius,
      display: "flex",
      flex: 1,
      flexDirection: "column",
      maxHeight: "100%"
    }
  }, props));
}), HeadFoot = styled.div({
  lineHeight: 1,
  margin: "0 ".concat(innerGutter, "px"),
  paddingBottom: innerGutter,
  paddingTop: innerGutter,
  position: "relative",
  zIndex: 1
}), Header = styled(HeadFoot)({
  boxShadow: "0 2px 0 ".concat(colorUtils.alpha(theme.colors.text, .12))
}), Footer = styled(HeadFoot)({
  boxShadow: "0 -2px 0 ".concat(colorUtils.alpha(theme.colors.text, .12))
}), Body = styled.div({
  lineHeight: 1.4,
  overflowY: "auto",
  padding: innerGutter
});

function useKeydownHandler(handler) {
  let handlerRef = react.useRef(handler);
  react.useEffect(() => {
    handlerRef.current = handler;
  }), react.useEffect(() => {
    function handle(event) {
      handlerRef.current(event);
    }
    return document.addEventListener("keydown", handle, !1), () => {
      document.removeEventListener("keydown", handle, !1);
    };
  }, []);
}

let ModalDialog = react.memo(function(_ref3) {
  let attachTo = _ref3.attachTo, children = _ref3.children, closeOnBlanketClick = _ref3.closeOnBlanketClick, component = _ref3.component, footer = _ref3.footer, heading = _ref3.heading, initialFocus = _ref3.initialFocus, onClose = _ref3.onClose, slideInFrom = _ref3.slideInFrom, width = _ref3.width, onKeyDown = _ref3.onKeyDown, transitionState = _ref3.transitionState, isOpen = _ref3.isOpen, stackIndex = useStackIndex("entered" === transitionState || "entering" === transitionState, slideInFrom);
  useKeydownHandler(event => {
    onKeyDown && 0 === stackIndex && onKeyDown(event);
  });
  const dialogTitleId = react.useMemo(modalUtils.generateUEID, []);
  return reactDom.createPortal(core.jsx(react.Fragment, null, isOpen ? core.jsx(modalUtils.Blanket, {
    style: modalUtils.fade(transitionState),
    onClick: closeOnBlanketClick ? onClose : void 0,
    isTinted: !0
  }) : null, core.jsx(Positioner, {
    style: modalUtils.slideInHorizontal(transitionState, {
      slideInFrom: slideInFrom
    }),
    slideInFrom: slideInFrom,
    width: width,
    stackIndex: stackIndex
  }, core.jsx(reactFocusMarshal.FocusTrap, {
    options: {
      initialFocus: initialFocus,
      clickOutsideDeactivates: closeOnBlanketClick
    }
  }, core.jsx(Dialog, {
    component: component,
    "aria-labelledby": dialogTitleId
  }, core.jsx(typography.A11yText, {
    id: dialogTitleId
  }, heading, " Dialog"), heading ? core.jsx(Header, null, core.jsx(typography.Title, null, heading)) : null, core.jsx(Body, null, children), footer ? core.jsx(Footer, null, footer) : null))), core.jsx(ScrollLock, null)), attachTo);
});

ModalDialog.defaultProps = {
  attachTo: document.body,
  closeOnBlanketClick: !1,
  component: "div",
  width: 640
};

var index = modalUtils.withTransitionState(ModalDialog);

exports.default = index;
