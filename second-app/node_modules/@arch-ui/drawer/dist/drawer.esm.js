import _extends from '@babel/runtime/helpers/esm/extends';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import { useState, useLayoutEffect, forwardRef, memo, useMemo, Fragment, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import styled from '@emotion/styled';
import ScrollLock from 'react-scrolllock';
import { FocusTrap } from 'react-focus-marshal';
import { withTransitionState, generateUEID, Blanket, fade, slideInHorizontal } from '@arch-ui/modal-utils';
import { shadows, borderRadius, colors, gridSize } from '@arch-ui/theme';
import { alpha } from '@arch-ui/color-utils';
import { A11yText, Title } from '@arch-ui/typography';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';

// TODO: investigate if this will cause problems with concurrent mode

let allStackConsumers = {
  left: [],
  right: []
};

let updateStackConsumers = slideInFrom => {
  allStackConsumers[slideInFrom].forEach(update => {
    update();
  });
}; // This hook provides the position of a modal dialog in the list of all open dialogs.
// The key behaviours are:
// - When a modal renders for the first time it takes the first stack position
// - When a modal mounts, all other modals have to adjust their position
// - When a modal unmounts, all other modals have to adjust their position


function useStackIndex(isOpen, slideInFrom) {
  let _useState = useState(isOpen ? 0 : -1),
      _useState2 = _slicedToArray(_useState, 2),
      stackIndex = _useState2[0],
      setStackIndex = _useState2[1];

  useLayoutEffect(() => {
    if (isOpen) {
      let update = () => {
        setStackIndex(allStackConsumers[slideInFrom].indexOf(update));
      };

      allStackConsumers[slideInFrom].unshift(update);
      updateStackConsumers(slideInFrom);
      return () => {
        allStackConsumers[slideInFrom] = allStackConsumers[slideInFrom].filter(x => x !== update);
        updateStackConsumers(slideInFrom);
      };
    } else {
      setStackIndex(-1);
    }
  }, [isOpen, slideInFrom]);
  return stackIndex;
}

const innerGutter = gridSize * 2; // Styled Components
// ------------------------------

const Positioner = (_ref) => {
  let slideInFrom = _ref.slideInFrom,
      width = _ref.width,
      stackIndex = _ref.stackIndex,
      _ref$style = _ref.style,
      transform = _ref$style.transform,
      style = _objectWithoutProperties(_ref$style, ["transform"]),
      props = _objectWithoutProperties(_ref, ["slideInFrom", "width", "stackIndex", "style"]);

  const stackTransforms = stackIndex <= 0 ? [] : ["translate(calc(".concat(stackIndex * 0.3, " * -9vw))"), "scale(".concat(1 - stackIndex / 50, ")")];
  return jsx("div", _extends({
    css: _objectSpread({
      boxSizing: 'border-box',
      padding: gridSize,
      display: 'flex',
      flexDirection: 'column',
      height: '100%',
      maxWidth: '90%',
      position: 'fixed',
      [slideInFrom]: 0,
      top: 0,
      width,
      zIndex: 2,
      transform: "".concat(transform).concat(stackTransforms.join(' '))
    }, style)
  }, props));
};

const Dialog = forwardRef((_ref2, ref) => {
  let Tag = _ref2.component,
      props = _objectWithoutProperties(_ref2, ["component"]);

  return jsx(Tag, _extends({
    ref: ref,
    role: "dialog",
    css: {
      backgroundColor: 'white',
      boxShadow: shadows[3],
      borderRadius: borderRadius * 2,
      display: 'flex',
      flex: 1,
      flexDirection: 'column',
      // margin: gridSize,
      maxHeight: '100%'
    }
  }, props));
}); // Content

const HeadFoot = styled.div({
  lineHeight: 1,
  margin: "0 ".concat(innerGutter, "px"),
  paddingBottom: innerGutter,
  paddingTop: innerGutter,
  // ensure that box-shadow covers body content
  position: 'relative',
  zIndex: 1
});
const Header = styled(HeadFoot)({
  boxShadow: "0 2px 0 ".concat(alpha(colors.text, 0.12))
});
const Footer = styled(HeadFoot)({
  boxShadow: "0 -2px 0 ".concat(alpha(colors.text, 0.12))
});
const Body = styled.div({
  lineHeight: 1.4,
  overflowY: 'auto',
  padding: innerGutter
}); // Dialog
// ------------------------------

function useKeydownHandler(handler) {
  let handlerRef = useRef(handler);
  useEffect(() => {
    handlerRef.current = handler;
  });
  useEffect(() => {
    function handle(event) {
      // $FlowFixMe flow's definition of useRef is wrong
      handlerRef.current(event);
    }

    document.addEventListener('keydown', handle, false);
    return () => {
      document.removeEventListener('keydown', handle, false);
    };
  }, []);
}

let ModalDialog = memo(function ModalDialog(_ref3) {
  let attachTo = _ref3.attachTo,
      children = _ref3.children,
      closeOnBlanketClick = _ref3.closeOnBlanketClick,
      component = _ref3.component,
      footer = _ref3.footer,
      heading = _ref3.heading,
      initialFocus = _ref3.initialFocus,
      onClose = _ref3.onClose,
      slideInFrom = _ref3.slideInFrom,
      width = _ref3.width,
      onKeyDown = _ref3.onKeyDown,
      transitionState = _ref3.transitionState,
      isOpen = _ref3.isOpen;
  let stackIndex = useStackIndex(transitionState === 'entered' || transitionState === 'entering', slideInFrom);
  useKeydownHandler(event => {
    if (onKeyDown && stackIndex === 0) {
      onKeyDown(event);
    }
  });
  const dialogTitleId = useMemo(generateUEID, []);
  return createPortal(jsx(Fragment, null, isOpen ? jsx(Blanket, {
    style: fade(transitionState),
    onClick: closeOnBlanketClick ? onClose : undefined,
    isTinted: true
  }) : null, jsx(Positioner, {
    style: slideInHorizontal(transitionState, {
      slideInFrom
    }),
    slideInFrom: slideInFrom,
    width: width,
    stackIndex: stackIndex
  }, jsx(FocusTrap, {
    options: {
      initialFocus,
      clickOutsideDeactivates: closeOnBlanketClick
    }
  }, jsx(Dialog, {
    component: component,
    "aria-labelledby": dialogTitleId
  }, jsx(A11yText, {
    id: dialogTitleId
  }, heading, " Dialog"), heading ? jsx(Header, null, jsx(Title, null, heading)) : null, jsx(Body, null, children), footer ? jsx(Footer, null, footer) : null))), jsx(ScrollLock, null)), attachTo);
}); // $FlowFixMe

ModalDialog.defaultProps = {
  attachTo: document.body,
  closeOnBlanketClick: false,
  component: 'div',
  width: 640
};
var index = withTransitionState(ModalDialog);

export default index;
