"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), React = require("react"), React__default = _interopDefault(React), reactTransitionGroup = require("react-transition-group"), core = require("@emotion/core"), theme = require("@arch-ui/theme"), colorUtils = require("@arch-ui/color-utils"), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), ScrollLock = _interopDefault(require("react-scrolllock"));

const transitionDurationMs = 220, transitionDuration = "".concat(220, "ms"), transitionTimingFunction = "cubic-bezier(0.2, 0, 0, 1)", TransitionProvider = _ref => {
  let children = _ref.children, isOpen = _ref.isOpen, props = _objectWithoutProperties(_ref, [ "children", "isOpen" ]);
  return React__default.createElement(reactTransitionGroup.TransitionGroup, {
    component: null
  }, isOpen ? React__default.createElement(reactTransitionGroup.Transition, _extends({
    appear: !0,
    mountOnEnter: !0,
    unmountOnExit: !0,
    timeout: 220
  }, props), state => children(state)) : null);
}, withTransitionState = Comp => _ref2 => {
  let isOpen = _ref2.isOpen, props = _objectWithoutProperties(_ref2, [ "isOpen" ]);
  return React__default.createElement(TransitionProvider, {
    isOpen: isOpen
  }, state => React__default.createElement(Comp, _extends({
    transitionState: state
  }, props)));
};

function makeTransitionBase(transitionProperty) {
  return {
    transitionProperty: transitionProperty,
    transitionDuration: transitionDuration,
    transitionTimingFunction: transitionTimingFunction
  };
}

const fade = transitionState => _objectSpread({}, makeTransitionBase("opacity"), {
  opacity: {
    entering: 1,
    entered: 1,
    exiting: 0,
    exited: 0
  }[transitionState]
}), slideUp = transitionState => {
  const out = {
    opacity: 0,
    transform: "scale(0.95) translate3d(0,20px,0)"
  };
  return _objectSpread({}, makeTransitionBase("opacity, transform"), {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    },
    exiting: out,
    exited: out
  }[transitionState]);
}, slideDown = function(transitionState) {
  let _ref3$from = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).from;
  const out = {
    opacity: 0,
    transform: "translate3d(0,".concat(void 0 === _ref3$from ? "-8px" : _ref3$from, ",0)")
  };
  return _objectSpread({}, makeTransitionBase("opacity, transform"), {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    },
    exiting: out,
    exited: out
  }[transitionState]);
}, fromMap = {
  left: "-100%",
  right: "100%"
}, slideInHorizontal = (transitionState, _ref4) => {
  let slideInFrom = _ref4.slideInFrom;
  const initial = fromMap[slideInFrom];
  return _objectSpread({}, makeTransitionBase("transform"), {
    entering: {
      transform: "translate3d(0,0,0)"
    },
    entered: {
      transform: "translate3d(0,0,0)"
    },
    exiting: {
      transform: "translate3d(".concat(initial, ", 0, 0)")
    },
    exited: {
      transform: "translate3d(".concat(initial, ", 0, 0)")
    }
  }[transitionState]);
}, zoomInDown = transitionState => _objectSpread({
  transformOrigin: "top",
  transitionProperty: "opacity, transform",
  transitionDuration: transitionDuration,
  transitionTimingFunction: transitionTimingFunction
}, {
  entering: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  entered: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  exiting: {
    opacity: 0,
    transform: "scale3d(0.33, 0.33, 0.33) translate3d(0, -100%, 0)"
  },
  exited: {
    opacity: 0,
    transform: "scale3d(0.33, 0.33, 0.33) translate3d(0, -100%, 0)"
  }
}[transitionState]), springDown = transitionState => _objectSpread({
  transformOrigin: "top",
  transitionProperty: "opacity, transform",
  transitionDuration: transitionDuration,
  transitionTimingFunction: "cubic-bezier(0.2, 0, 0.16, 1.6)"
}, {
  entering: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  entered: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  exiting: {
    opacity: 0,
    transform: "scale(0.93) translate3d(0, -12px, 0)"
  },
  exited: {
    opacity: 0,
    transform: "scale(0.93) translate3d(0, -12px, 0)"
  }
}[transitionState]), Blanket = _ref => {
  let isTinted = _ref.isTinted, isLight = _ref.isLight, props = _objectWithoutProperties(_ref, [ "isTinted", "isLight" ]), bg = "transparent";
  return isTinted && (bg = isLight ? "rgba(255, 255, 255, 0.5)" : colorUtils.alpha(theme.colors.N100, .2)), 
  core.jsx("div", _extends({
    css: {
      backgroundColor: bg,
      bottom: 0,
      left: 0,
      position: "fixed",
      right: 0,
      top: 0,
      zIndex: 2
    }
  }, props));
};

function getDisplayName(C) {
  return "withModalHandlers(".concat(C.displayName || C.name || "Component", ")");
}

const NOOP = () => {};

let Target = React.memo(function(_ref) {
  let isOpen = _ref.isOpen, mode = _ref.mode, target = _ref.target, targetRef = _ref.targetRef, open = _ref.open, toggle = _ref.toggle;
  const cloneProps = {
    isActive: isOpen,
    ref: targetRef
  };
  return "click" === mode && (cloneProps.onClick = toggle), "contextmenu" === mode && (cloneProps.onContextMenu = open), 
  target(cloneProps);
});

function withModalHandlers(WrappedComponent, _ref2) {
  let transition = _ref2.transition;
  class IntermediateComponent extends React.Component {
    constructor() {
      super(...arguments), _defineProperty(this, "lastHover", void 0), _defineProperty(this, "contentNode", void 0), 
      _defineProperty(this, "targetNode", void 0), _defineProperty(this, "state", {
        isOpen: this.props.defaultIsOpen,
        clientX: 0,
        clientY: 0
      }), _defineProperty(this, "open", event => {
        if (event.defaultPrevented) return;
        "contextmenu" === this.props.mode && event.preventDefault();
        const clientX = event.clientX, clientY = event.clientY;
        this.setState({
          isOpen: !0,
          clientX: clientX,
          clientY: clientY
        }), document.addEventListener("mousedown", this.handleMouseDown), document.addEventListener("keydown", this.handleKeyDown, !1);
      }), _defineProperty(this, "close", event => {
        event && event.defaultPrevented || (this.setState({
          isOpen: !1,
          clientX: 0,
          clientY: 0
        }), document.removeEventListener("mousedown", this.handleMouseDown), document.removeEventListener("keydown", this.handleKeyDown, !1));
      }), _defineProperty(this, "toggle", event => {
        this.state.isOpen ? this.close(event) : this.open(event);
      }), _defineProperty(this, "handleScroll", event => {
        event.preventDefault();
      }), _defineProperty(this, "handleMouseDown", event => {
        const target = event.target, isOpen = this.state.isOpen;
        (target instanceof HTMLElement || target instanceof SVGElement) && (!isOpen || this.contentNode.contains(target) || this.targetNode.contains(target) || this.close(event));
      }), _defineProperty(this, "handleKeyDown", event => {
        "Escape" === event.key && this.close(event);
      }), _defineProperty(this, "getTarget", ref => {
        this.targetNode = ref;
      }), _defineProperty(this, "getContent", ref => {
        this.contentNode = ref;
      });
    }
    render() {
      const _this$props = this.props, mode = _this$props.mode, onClose = _this$props.onClose, onOpen = _this$props.onOpen, target = _this$props.target, _this$state = this.state, clientX = _this$state.clientX, clientY = _this$state.clientY, isOpen = _this$state.isOpen;
      return React__default.createElement(React.Fragment, null, React__default.createElement(Target, {
        targetRef: this.getTarget,
        target: target,
        mode: mode,
        isOpen: isOpen,
        toggle: this.toggle,
        open: this.open
      }), isOpen ? React__default.createElement(ScrollLock, null) : null, React__default.createElement(TransitionProvider, {
        isOpen: isOpen,
        onEntered: onOpen,
        onExited: onClose
      }, transitionState => React__default.createElement(WrappedComponent, _extends({
        close: this.close,
        open: this.open,
        getModalRef: this.getContent,
        targetNode: this.targetNode,
        contentNode: this.contentNode,
        isOpen: isOpen,
        mouseCoords: {
          clientX: clientX,
          clientY: clientY
        },
        style: transition(transitionState)
      }, this.props))));
    }
  }
  return _defineProperty(IntermediateComponent, "defaultProps", {
    mode: "click",
    onClose: NOOP,
    onOpen: NOOP
  }), IntermediateComponent.displayName = getDisplayName(WrappedComponent), IntermediateComponent;
}

function generateUEID() {
  let first = 46656 * Math.random() | 0, second = 46656 * Math.random() | 0;
  return (first = ("000" + first.toString(36)).slice(-3)) + (second = ("000" + second.toString(36)).slice(-3));
}

exports.generateUEID = generateUEID, exports.fade = fade, exports.slideUp = slideUp, 
exports.slideDown = slideDown, exports.slideInHorizontal = slideInHorizontal, exports.springDown = springDown, 
exports.zoomInDown = zoomInDown, exports.TransitionProvider = TransitionProvider, 
exports.withTransitionState = withTransitionState, exports.Blanket = Blanket, exports.withModalHandlers = withModalHandlers;
