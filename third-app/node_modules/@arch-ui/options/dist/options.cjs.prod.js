"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), core = require("@emotion/core"), react = require("react"), ReactSelect = require("react-select"), ReactSelect__default = _interopDefault(ReactSelect), icons = require("@arch-ui/icons"), theme = require("@arch-ui/theme"), common = require("@arch-ui/common");

const CheckMark = _ref => {
  let bg, fg, border, isDisabled = _ref.isDisabled, isFocused = _ref.isFocused, isSelected = _ref.isSelected;
  return isDisabled ? (bg = isSelected ? theme.colors.N20 : theme.colors.N10, fg = isSelected ? "white" : theme.colors.N10, 
  border = isSelected ? theme.colors.N20 : theme.colors.N10) : isSelected ? (bg = isFocused ? "white" : theme.colors.B.base, 
  fg = isFocused ? theme.colors.B.base : "white", border = theme.colors.B.base) : (border = isFocused ? theme.colors.N15 : theme.colors.N10, 
  bg = isFocused ? theme.colors.N05 : "white", fg = isFocused ? theme.colors.N05 : "white"), 
  core.jsx("div", {
    css: {
      alignItems: "center",
      backgroundColor: bg,
      border: "2px solid ".concat(border),
      borderRadius: 24,
      boxSizing: "border-box",
      color: fg,
      display: "flex",
      height: 24,
      justifyContent: "center",
      width: 24
    }
  }, core.jsx(icons.CheckIcon, null));
}, OptionPrimitive = _ref2 => {
  let children = _ref2.children, isDisabled = _ref2.isDisabled, innerProps = _ref2.innerProps, innerRef = _ref2.innerRef;
  return core.jsx("div", _extends({
    ref: innerRef,
    css: {
      alignItems: "center",
      color: isDisabled ? theme.colors.N40 : null,
      cursor: "pointer",
      display: "flex",
      fontSize: "0.9em",
      fontWeight: 500,
      justifyContent: "space-between",
      outline: 0,
      padding: "".concat(theme.gridSize, "px 0"),
      pointerEvents: isDisabled ? "none" : null,
      "&:not(:first-of-type)": {
        borderTop: "1px solid ".concat(theme.colors.N10)
      }
    }
  }, innerProps), children);
}, optionRendererStyles = {
  control: (provided, state) => _objectSpread({}, provided, common.uniformHeight, {
    background: state.isFocused ? theme.colors.N10 : theme.colors.N05,
    border: 0,
    boxShadow: "none",
    cursor: "text",
    padding: 0,
    minHeight: 34
  }),
  menu: () => ({
    marginTop: 8
  }),
  menuList: provided => _objectSpread({}, provided, {
    padding: 0
  }),
  placeholder: provided => _objectSpread({}, provided, {
    color: theme.colors.N50
  })
}, Control = _ref3 => {
  let selectProps = _ref3.selectProps, props = _objectWithoutProperties(_ref3, [ "selectProps" ]);
  return selectProps.shouldDisplaySearchControl ? core.jsx(ReactSelect.components.Control, props) : core.jsx("div", {
    css: {
      border: 0,
      clip: "rect(1px, 1px, 1px, 1px)",
      height: 1,
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      whiteSpace: "nowrap",
      width: 1
    }
  }, core.jsx(ReactSelect.components.Control, props));
}, defaultComponents = {
  Control: Control,
  Option: OptionPrimitive,
  DropdownIndicator: null,
  IndicatorSeparator: null
}, Options = _ref4 => {
  let displaySearch = _ref4.displaySearch, innerRef = _ref4.innerRef, propComponents = _ref4.components, props = _objectWithoutProperties(_ref4, [ "displaySearch", "innerRef", "components" ]);
  const components = react.useMemo(() => _objectSpread({}, defaultComponents, propComponents), [ propComponents ]);
  return core.jsx(ReactSelect__default, _extends({
    backspaceRemovesValue: !1,
    captureMenuScroll: !1,
    closeMenuOnSelect: !1,
    controlShouldRenderValue: !1,
    hideSelectedOptions: !1,
    isClearable: !1,
    isSearchable: displaySearch,
    maxMenuHeight: 1e3,
    menuIsOpen: !0,
    menuShouldScrollIntoView: !1,
    ref: innerRef,
    shouldDisplaySearchControl: displaySearch,
    styles: optionRendererStyles,
    tabSelectsValue: !1
  }, props, {
    components: components
  }));
};

Options.defaultProps = {
  displaySearch: !0
}, exports.CheckMark = CheckMark, exports.OptionPrimitive = OptionPrimitive, exports.Options = Options;
