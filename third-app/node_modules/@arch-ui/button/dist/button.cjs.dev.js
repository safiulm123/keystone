'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var react = require('react');

var core = require('@emotion/core');

var styled = _interopDefault(require('@emotion/styled'));

var loading = require('@arch-ui/loading');

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

var reactRouterDom = require('react-router-dom');

var reactPseudoState = require('react-pseudo-state');

var theme = require('@arch-ui/theme');

var common = require('@arch-ui/common');

var colorUtils = require('@arch-ui/color-utils');

const boldAppearance = {
  default: {
    bg: '#fff',
    border: theme.colors.N20,
    focusRing: theme.colors.primary,
    text: theme.colors.text
  },
  primary: {
    bg: theme.colors.primary,
    border: theme.colors.primary,
    text: '#fff'
  },
  create: {
    bg: theme.colors.create,
    border: theme.colors.create,
    text: '#fff'
  },
  danger: {
    bg: theme.colors.danger,
    border: theme.colors.danger,
    text: '#fff'
  },
  warning: {
    bg: theme.colors.warning,
    border: theme.colors.warning,
    text: '#fff'
  }
};
const ghostAppearance = {
  default: {
    border: theme.colors.N20,
    text: theme.colors.N60
  },
  primary: {
    border: theme.colors.B.L50,
    text: theme.colors.primary
  },
  create: {
    border: theme.colors.G.L50,
    text: theme.colors.create
  },
  danger: {
    border: theme.colors.R.L50,
    text: theme.colors.danger
  },
  warning: {
    border: theme.colors.Y.L30,
    text: theme.colors.warning
  }
};
const subtleAppearance = {
  default: {
    text: theme.colors.N40,
    textHover: theme.colors.text
  },
  primary: {
    text: theme.colors.N40,
    textHover: theme.colors.primary
  },
  warning: {
    text: theme.colors.N40,
    textHover: theme.colors.danger
  },
  danger: {
    text: theme.colors.danger,
    textHover: theme.colors.danger
  }
};
const nuanceAppearance = {
  default: {
    text: theme.colors.text
  },
  primary: {
    text: theme.colors.primary
  },
  warning: {
    text: theme.colors.danger
  },
  danger: {
    text: theme.colors.danger
  }
};

function makeSubtleVariant(_ref) {
  let appearance = _ref.appearance;
  const _subtleAppearance$app = subtleAppearance[appearance],
        text = _subtleAppearance$app.text,
        textHover = _subtleAppearance$app.textHover;
  return {
    color: text,
    fontWeight: null,
    ':hover, :focus': {
      color: textHover,
      textDecoration: 'underline'
    }
  };
}

function makeNuanceVariant(_ref2) {
  let appearance = _ref2.appearance,
      isDisabled = _ref2.isDisabled;
  const text = nuanceAppearance[appearance].text;
  return {
    color: text,
    fontWeight: 'normal',
    ':hover, :focus': makeGhostVariant({
      appearance,
      isDisabled
    })
  };
} // Ghost
// ------------------------------


function makeGhostVariant(_ref3) {
  let appearance = _ref3.appearance,
      isDisabled = _ref3.isDisabled;
  const _ghostAppearance$appe = ghostAppearance[appearance],
        border = _ghostAppearance$appe.border,
        text = _ghostAppearance$appe.text;
  return {
    border: '1px solid',
    borderColor: border,
    color: text,
    fontWeight: 'normal',
    opacity: isDisabled ? 0.5 : null,
    ':hover, :focus': {
      backgroundColor: colorUtils.alpha(border, 0.1),
      borderColor: colorUtils.darken(border, 10)
    },
    ':active': {
      color: colorUtils.darken(text, 10),
      borderColor: colorUtils.darken(border, 20),
      backgroundColor: colorUtils.alpha(border, 0.2)
    }
  };
} // Bold
// ------------------------------


function makeBoldVariant(_ref4) {
  let appearance = _ref4.appearance,
      isDisabled = _ref4.isDisabled,
      isActive = _ref4.isActive,
      isHover = _ref4.isHover,
      isFocus = _ref4.isFocus,
      isSelected = _ref4.isSelected; // $FlowFixMe

  const _boldAppearance$appea = boldAppearance[appearance],
        bg = _boldAppearance$appea.bg,
        border = _boldAppearance$appea.border,
        focusRing = _boldAppearance$appea.focusRing,
        text = _boldAppearance$appea.text;
  const activeBg = appearance === 'default' ? theme.colors.N10 : colorUtils.darken(bg, 12);
  const hoverAndFocus = isHover || isFocus ? {
    borderColor: border,
    background: bg
  } : null;
  const hoverStyles = isHover ? _objectSpread({}, hoverAndFocus, {
    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.12)'
  }) : null;
  const focusStyles = isFocus && !isDisabled ? _objectSpread({}, hoverAndFocus, {
    borderColor: focusRing,
    boxShadow: "0 0 0 3px ".concat(colorUtils.alpha(focusRing || bg, 0.2))
  }) : null;
  const activeStyles = isActive || isSelected ? {
    background: activeBg,
    borderColor: border
  } : null;
  return _objectSpread({
    backgroundColor: bg,
    backgroundRepeat: 'repeat-x',
    borderColor: border,
    color: text,
    fontWeight: 'bold'
  }, hoverStyles, focusStyles, activeStyles);
}

const SPACING_OPTION = {
  comfortable: "".concat(theme.gridSize, "px ").concat(theme.gridSize * 1.5, "px"),
  cozy: '2px 6px',
  cramped: '1px 2px'
};

function makeVariant(_ref) {
  let appearance = _ref.appearance,
      isActive = _ref.isActive,
      isBlock = _ref.isBlock,
      isHover = _ref.isHover,
      isFocus = _ref.isFocus,
      isDisabled = _ref.isDisabled,
      isSelected = _ref.isSelected,
      variant = _ref.variant,
      spacing = _ref.spacing;
  let variantStyles;
  const config = {
    appearance,
    isDisabled,
    isActive,
    isHover,
    isFocus,
    isSelected
  };

  if (variant === 'subtle') {
    variantStyles = makeSubtleVariant(config);
  } else if (variant === 'nuance') {
    // $FlowFixMe
    variantStyles = makeNuanceVariant(config);
  } else if (variant === 'bold') {
    variantStyles = makeBoldVariant(config);
  } else if (variant === 'ghost') {
    variantStyles = makeGhostVariant(config);
  }

  return _objectSpread({}, common.uniformHeight, {
    cursor: isDisabled ? 'default' : 'pointer',
    display: isBlock ? 'block' : 'inline-block',
    opacity: isDisabled ? 0.66 : null,
    outline: 0,
    padding: SPACING_OPTION[spacing],
    pointerEvents: isDisabled ? 'none' : null,
    textAlign: 'center',
    touchAction: 'manipulation',
    // Disables "double-tap to zoom" for mobile; removes delay on click events
    userSelect: 'none',
    width: isBlock ? '100%' : null,
    // override possible anchor styles
    ':hover': {
      textDecoration: 'none'
    }
  }, variantStyles);
} // remove props that will create react DOM warnings


const ButtonElement = react.forwardRef((props, ref) => {
  const isDisabled = props.isDisabled,
        isActive = props.isActive,
        isFocus = props.isFocus,
        isHover = props.isHover,
        isSelected = props.isSelected,
        focusOrigin = props.focusOrigin,
        rest = _objectWithoutProperties(props, ["isDisabled", "isActive", "isFocus", "isHover", "isSelected", "focusOrigin"]);

  const variant = makeVariant(props);

  if (rest.to) {
    return core.jsx(reactRouterDom.Link, _extends({
      innerRef: ref,
      css: variant
    }, rest));
  }

  if (rest.href) {
    return core.jsx("a", _extends({
      css: variant
    }, rest, {
      // $FlowFixMe
      ref: ref
    }));
  }

  return core.jsx("button", _extends({
    type: "button",
    disabled: isDisabled,
    css: variant
  }, rest, {
    // $FlowFixMe
    ref: ref
  }));
}); // $FlowFixMe

ButtonElement.defaultProps = {
  appearance: 'default',
  spacing: 'comfortable',
  variant: 'bold'
};
const Button = reactPseudoState.withPseudoState(ButtonElement);
const LoadingButtonInner = styled.div({
  position: 'relative'
});
const LoadingIndicatorWrapper = styled.div({
  left: '50%',
  position: 'absolute',
  top: '50%',
  transform: 'translate(-50%, -50%)'
});

function getAppearance(appearance) {
  if (appearance === 'default') return 'dark';
  return 'inverted';
} // Export


const LoadingButton = react.forwardRef((_ref, ref) => {
  let children = _ref.children,
      indicatorVariant = _ref.indicatorVariant,
      isLoading = _ref.isLoading,
      props = _objectWithoutProperties(_ref, ["children", "indicatorVariant", "isLoading"]);

  const appearance = getAppearance(props.appearance);
  const textCSS = isLoading ? {
    visibility: 'hidden'
  } : null;
  const isSpinner = indicatorVariant === 'spinner';
  return core.jsx(Button, _extends({
    ref: ref
  }, props), core.jsx(LoadingButtonInner, null, isLoading ? core.jsx(LoadingIndicatorWrapper, null, isSpinner ? core.jsx(loading.LoadingSpinner, {
    appearance: appearance,
    size: 16
  }) : core.jsx(loading.LoadingIndicator, {
    appearance: appearance,
    size: 4
  })) : null, core.jsx("span", {
    css: textCSS
  }, children)));
}); // $FlowFixMe

LoadingButton.defaultProps = {
  appearance: 'default',
  isLoading: false,
  variant: 'bold',
  indicatorVariant: 'dots'
};
const IconButton = react.forwardRef((_ref, ref) => {
  let children = _ref.children,
      Icon = _ref.icon,
      _ref$iconSize = _ref.iconSize,
      iconSize = _ref$iconSize === void 0 ? 16 : _ref$iconSize,
      props = _objectWithoutProperties(_ref, ["children", "icon", "iconSize"]);

  return core.jsx(Button, _extends({
    ref: ref
  }, props), core.jsx("span", {
    css: {
      display: 'flex',
      alignItems: 'center'
    }
  }, core.jsx(Icon, {
    css: children ? {
      height: iconSize,
      width: iconSize,
      marginRight: '0.5em'
    } : null
  }), children));
});
exports.LoadingButton = LoadingButton;
exports.IconButton = IconButton;
exports.Button = Button;
