"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray")), core = require("@emotion/core"), React = require("react"), icons = require("@arch-ui/icons"), layout = require("@arch-ui/layout"), loading = require("@arch-ui/loading"), button = require("@arch-ui/button");

const Page = props => {
  return React.createElement(button.Button, _extends({}, props, {
    onClick: () => {
      props.onClick && props.onClick(props.value);
    }
  }));
};

function ariaPageLabelFn(page) {
  return "Go to page ".concat(page);
}

const PageChildren = _ref => {
  let page = _ref.page, isLoading = _ref.isLoading, isSelected = _ref.isSelected;
  const _useState = React.useState(!1), _useState2 = _slicedToArray(_useState, 2), shouldShowLoading = _useState2[0], setShouldShowLoading = _useState2[1];
  return React.useEffect(() => {
    if (isLoading && isSelected) {
      const id = setTimeout(() => {
        setShouldShowLoading(!0);
      }, 200);
      return () => {
        clearTimeout(id), setShouldShowLoading(!1);
      };
    }
  }, [ page, isLoading, isSelected ]), shouldShowLoading ? core.jsx("div", {
    css: {
      height: 19
    }
  }, core.jsx(loading.LoadingSpinner, null)) : core.jsx("span", null, page);
};

class Pagination extends React.Component {
  constructor() {
    super(...arguments), _defineProperty(this, "state", {
      allPagesVisible: !1
    }), _defineProperty(this, "toggleAllPages", () => {
      this.setState(state => ({
        allPagesVisible: !state.allPagesVisible
      }));
    });
  }
  renderPages() {
    let _this$props = this.props, ariaPageLabel = _this$props.ariaPageLabel, currentPage = _this$props.currentPage, limit = _this$props.limit, pageSize = _this$props.pageSize, total = _this$props.total;
    if (total <= pageSize) return [];
    let pages = [], totalPages = Math.ceil(total / pageSize), minPage = 1, maxPage = totalPages;
    const moreCharacter = core.jsx("span", null, "â€¦");
    if (limit && limit < totalPages) {
      let rightLimit = Math.floor(limit / 2);
      maxPage = currentPage + rightLimit, (minPage = currentPage - (rightLimit + limit % 2 - 1)) < 1 && (maxPage = limit, 
      minPage = 1), maxPage > totalPages && (minPage = totalPages - limit + 1, maxPage = totalPages);
    }
    const onChange = page => {
      this.props.onChange && (this.setState({
        allPagesVisible: !1
      }), this.props.onChange(page, {
        pageSize: pageSize,
        total: total,
        minPage: minPage,
        maxPage: maxPage
      }));
    };
    minPage > 1 && pages.push(core.jsx(Page, {
      "aria-label": ariaPageLabel(1),
      key: "page_start",
      onClick: onChange,
      value: 1
    }, moreCharacter));
    for (let page = minPage; page <= maxPage; page++) {
      const isSelected = page === currentPage;
      pages.push(core.jsx(Page, {
        "aria-label": ariaPageLabel(page),
        "aria-current": isSelected ? "page" : null,
        key: "page_".concat(page),
        isSelected: isSelected,
        onClick: onChange,
        value: page
      }, core.jsx(PageChildren, {
        isLoading: this.props.isLoading,
        page: page,
        isSelected: isSelected
      })));
    }
    return maxPage < totalPages && pages.push(core.jsx(Page, {
      "aria-label": ariaPageLabel(totalPages),
      key: "page_end",
      onClick: onChange,
      value: totalPages
    }, moreCharacter)), [ core.jsx(Page, {
      "aria-label": "Go to previous page",
      key: "page_prev",
      onClick: onChange,
      value: currentPage - 1,
      isDisabled: 1 === currentPage
    }, core.jsx(icons.ChevronLeftIcon, null)), this.state.allPagesVisible ? pages : core.jsx(Page, {
      "aria-label": "Click to show all pages",
      key: "page_dot",
      onClick: this.toggleAllPages,
      id: "ks-pagination-show-pages",
      value: 1
    }, core.jsx(icons.ListOrderedIcon, null)), core.jsx(Page, {
      "aria-label": "Go to next page",
      key: "page_next",
      onClick: onChange,
      value: currentPage + 1,
      isDisabled: currentPage === totalPages
    }, core.jsx(icons.ChevronRightIcon, null)) ];
  }
  render() {
    const _this$props2 = this.props, rest = (_this$props2.ariaPageLabel, _this$props2.currentPage, 
    _this$props2.isLoading, _this$props2.limit, _this$props2.onChange, _this$props2.pageSize, 
    _this$props2.total, _objectWithoutProperties(_this$props2, [ "ariaPageLabel", "currentPage", "isLoading", "limit", "onChange", "pageSize", "total" ]));
    return core.jsx(layout.FlexGroup, _extends({
      as: "nav",
      align: "center",
      "aria-label": "Pagination",
      isContiguous: !0,
      isInline: !0
    }, rest), this.renderPages());
  }
}

_defineProperty(Pagination, "defaultProps", {
  ariaPageLabel: ariaPageLabelFn,
  currentPage: 1,
  limit: 5
}), exports.Pagination = Pagination;
