"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var React = require("react"), React__default = _interopDefault(React), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), core = require("@emotion/core"), _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), common = require("@arch-ui/common"), theme = require("@arch-ui/theme");

const HiddenInput = _ref => {
  let innerRef = _ref.innerRef, props = _objectWithoutProperties(_ref, [ "innerRef" ]);
  return core.jsx("input", _extends({
    ref: innerRef,
    tabIndex: "-1",
    css: {
      border: 0,
      clip: "rect(1px, 1px, 1px, 1px)",
      height: 1,
      margin: 0,
      opacity: 0,
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      whiteSpace: "nowrap",
      width: 1
    }
  }, props));
}, AutocompleteCaptor = React.memo(function() {
  return React__default.createElement(React.Fragment, null, React__default.createElement(HiddenInput, {
    autoComplete: "username",
    type: "text",
    tabIndex: -1
  }), React__default.createElement(HiddenInput, {
    autoComplete: "email",
    type: "text",
    tabIndex: -1
  }), React__default.createElement(HiddenInput, {
    autoComplete: "current-password",
    type: "password",
    tabIndex: -1
  }), React__default.createElement(HiddenInput, {
    autoComplete: "new-password",
    type: "password",
    tabIndex: -1
  }));
}, () => !0), inputStyles = function() {
  let props = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
  return _objectSpread({}, common.uniformHeight, {
    backgroundColor: props.disabled ? theme.colors.N10 : "white",
    borderColor: theme.colors.N20,
    color: "inherit",
    width: "100%",
    ":hover": {
      borderColor: theme.colors.N30,
      outline: 0
    },
    ":focus": {
      borderColor: theme.colors.primary,
      outline: 0
    },
    "&[disabled]": {
      borderColor: theme.colors.N15,
      backgroundColor: theme.colors.N05
    }
  }, props.isMultiline ? {
    lineHeight: "inherit",
    minHeight: 100,
    resize: "vertical",
    whiteSpace: "wrap"
  } : void 0);
}, Input = React.forwardRef((props, ref) => {
  const isMultiline = props.isMultiline, inputProps = _objectWithoutProperties(props, [ "isMultiline" ]), Component = isMultiline ? "textarea" : "input";
  return core.jsx(Component, _extends({
    ref: ref,
    css: inputStyles(props)
  }, inputProps));
});

exports.AutocompleteCaptor = AutocompleteCaptor, exports.HiddenInput = HiddenInput, 
exports.Input = Input, exports.inputStyles = inputStyles;
