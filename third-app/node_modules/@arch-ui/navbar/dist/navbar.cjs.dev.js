'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

var styled = _interopDefault(require('@emotion/styled'));

var theme = require('@arch-ui/theme');

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = require('react');

var React__default = _interopDefault(React);

var reactRouterDom = require('react-router-dom');

const ItemElement = _ref => {
  let Tag = _ref.as,
      isSelected = _ref.isSelected,
      mouseIsOverNav = _ref.mouseIsOverNav,
      props = _objectWithoutProperties(_ref, ["as", "isSelected", "mouseIsOverNav"]);

  if (Tag) return React.createElement(Tag, props);
  if (props.to) return React.createElement(reactRouterDom.Link, props);
  if (props.href) return React.createElement("a", props);
  return React.createElement("button", _extends({
    type: "button"
  }, props));
};

const PRIMARY_NAV_GUTTER = theme.gridSize * 2;
const NavGroupIcons = styled.div({
  alignItems: 'center',
  alignSelf: 'stretch',
  display: 'flex',
  flexFlow: 'row nowrap',
  justifyContent: 'space-between',
  padding: PRIMARY_NAV_GUTTER
});
const PrimaryNav = styled.nav({
  boxSizing: 'border-box',
  display: 'flex',
  flexFlow: 'column nowrap',
  height: '100vh',
  position: 'fixed',
  zIndex: 2
});
const PrimaryNavScrollArea = styled.div(_ref => {
  let hasScroll = _ref.hasScroll,
      isBottom = _ref.isBottom,
      isScrollable = _ref.isScrollable;
  const divider = {
    backgroundColor: 'rgba(9, 30, 66, 0.1)',
    content: '" "',
    height: 2,
    left: PRIMARY_NAV_GUTTER,
    right: PRIMARY_NAV_GUTTER,
    position: 'absolute'
  };
  const before = hasScroll ? _objectSpread({}, divider, {
    top: 0
  }) : null;
  const after = isScrollable && !isBottom ? _objectSpread({}, divider, {
    bottom: 0
  }) : null;
  return {
    boxSizing: 'border-box',
    flex: 1,
    overflowY: 'auto',
    overflowX: 'hidden',
    minWidth: 140,
    paddingBottom: PRIMARY_NAV_GUTTER,
    width: '100%',
    ':before': before,
    ':after': after
  };
});
const BrandItem = styled.h2({
  fontSize: 18,
  fontWeight: 500,
  margin: 0,
  paddingBottom: PRIMARY_NAV_GUTTER
});
const PrimaryNavItem = styled(ItemElement)(_ref2 => {
  let depth = _ref2.depth,
      isSelected = _ref2.isSelected,
      mouseIsOverNav = _ref2.mouseIsOverNav;
  const selectedStyles = isSelected ? {
    '&, :hover, :active, :focus': {
      ':after': {
        backgroundColor: theme.colors.primary
      }
    }
  } : {};
  return _objectSpread({
    border: 0,
    borderRight: '1px solid transparent',
    color: isSelected ? theme.colors.N90 : mouseIsOverNav ? theme.colors.N70 : theme.colors.N40,
    display: 'block',
    marginBottom: 2,
    overflow: 'hidden',
    paddingLeft: depth ? PRIMARY_NAV_GUTTER * depth : PRIMARY_NAV_GUTTER,
    paddingRight: PRIMARY_NAV_GUTTER,
    paddingBottom: theme.gridSize,
    paddingTop: theme.gridSize,
    position: 'relative',
    textDecoration: 'none',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    transition: 'color 110ms',
    ':hover': {
      backgroundColor: theme.colors.N10,
      textDecoration: 'none'
    },
    ':active': {
      backgroundColor: theme.colors.N10
    },
    ':after': {
      borderRadius: 2,
      bottom: 2,
      content: '" "',
      pointerEvents: 'none',
      position: 'absolute',
      right: 6,
      top: 2,
      transition: 'background-color 110ms',
      width: 4
    }
  }, selectedStyles);
});
const PrimaryNavHeading = styled.h3(_ref3 => {
  let depth = _ref3.depth;
  return {
    color: theme.colors.N40,
    fontSize: '0.85em',
    fontWeight: 'bold',
    marginTop: '2em',
    paddingLeft: depth ? PRIMARY_NAV_GUTTER * depth : PRIMARY_NAV_GUTTER,
    paddingRight: PRIMARY_NAV_GUTTER,
    textTransform: 'uppercase'
  };
});
const Wrapper = styled.nav({
  borderBottom: "1px solid ".concat(theme.colors.N10),
  color: theme.colors.text,
  fontSize: '0.85em'
});
const SecondaryNavItem = styled(ItemElement)(_ref => {
  let isSelected = _ref.isSelected;
  return {
    boxShadow: "inset 0 ".concat(isSelected ? -2 : 0, "px 0 currentColor"),
    color: isSelected ? theme.colors.text : theme.colors.N60,
    cursor: 'pointer',
    display: 'inline-block',
    marginRight: theme.gridSize,
    paddingBottom: theme.gridSize * 2,
    paddingTop: theme.gridSize * 2,
    transition: 'box-shadow 200ms',
    ':hover': {
      color: theme.colors.text,
      textDecoration: 'none'
    }
  };
});

const SecondaryNav = _ref2 => {
  let children = _ref2.children;
  return React__default.createElement(Wrapper, null, children);
};

exports.BrandItem = BrandItem;
exports.PrimaryNav = PrimaryNav;
exports.PrimaryNavItem = PrimaryNavItem;
exports.PrimaryNavHeading = PrimaryNavHeading;
exports.PrimaryNavScrollArea = PrimaryNavScrollArea;
exports.NavGroupIcons = NavGroupIcons;
exports.PRIMARY_NAV_GUTTER = PRIMARY_NAV_GUTTER;
exports.SecondaryNav = SecondaryNav;
exports.SecondaryNavItem = SecondaryNavItem;
