"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread")), styled = _interopDefault(require("@emotion/styled")), theme = require("@arch-ui/theme"), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), React = require("react"), React__default = _interopDefault(React), reactRouterDom = require("react-router-dom");

const ItemElement = _ref => {
  let Tag = _ref.as, props = (_ref.isSelected, _ref.mouseIsOverNav, _objectWithoutProperties(_ref, [ "as", "isSelected", "mouseIsOverNav" ]));
  return Tag ? React.createElement(Tag, props) : props.to ? React.createElement(reactRouterDom.Link, props) : props.href ? React.createElement("a", props) : React.createElement("button", _extends({
    type: "button"
  }, props));
}, PRIMARY_NAV_GUTTER = 2 * theme.gridSize, NavGroupIcons = styled.div({
  alignItems: "center",
  alignSelf: "stretch",
  display: "flex",
  flexFlow: "row nowrap",
  justifyContent: "space-between",
  padding: PRIMARY_NAV_GUTTER
}), PrimaryNav = styled.nav({
  boxSizing: "border-box",
  display: "flex",
  flexFlow: "column nowrap",
  height: "100vh",
  position: "fixed",
  zIndex: 2
}), PrimaryNavScrollArea = styled.div(_ref => {
  let hasScroll = _ref.hasScroll, isBottom = _ref.isBottom, isScrollable = _ref.isScrollable;
  const divider = {
    backgroundColor: "rgba(9, 30, 66, 0.1)",
    content: '" "',
    height: 2,
    left: PRIMARY_NAV_GUTTER,
    right: PRIMARY_NAV_GUTTER,
    position: "absolute"
  }, before = hasScroll ? _objectSpread({}, divider, {
    top: 0
  }) : null, after = isScrollable && !isBottom ? _objectSpread({}, divider, {
    bottom: 0
  }) : null;
  return {
    boxSizing: "border-box",
    flex: 1,
    overflowY: "auto",
    overflowX: "hidden",
    minWidth: 140,
    paddingBottom: PRIMARY_NAV_GUTTER,
    width: "100%",
    ":before": before,
    ":after": after
  };
}), BrandItem = styled.h2({
  fontSize: 18,
  fontWeight: 500,
  margin: 0,
  paddingBottom: PRIMARY_NAV_GUTTER
}), PrimaryNavItem = styled(ItemElement)(_ref2 => {
  let depth = _ref2.depth, isSelected = _ref2.isSelected, mouseIsOverNav = _ref2.mouseIsOverNav;
  const selectedStyles = isSelected ? {
    "&, :hover, :active, :focus": {
      ":after": {
        backgroundColor: theme.colors.primary
      }
    }
  } : {};
  return _objectSpread({
    border: 0,
    borderRight: "1px solid transparent",
    color: isSelected ? theme.colors.N90 : mouseIsOverNav ? theme.colors.N70 : theme.colors.N40,
    display: "block",
    marginBottom: 2,
    overflow: "hidden",
    paddingLeft: depth ? PRIMARY_NAV_GUTTER * depth : PRIMARY_NAV_GUTTER,
    paddingRight: PRIMARY_NAV_GUTTER,
    paddingBottom: theme.gridSize,
    paddingTop: theme.gridSize,
    position: "relative",
    textDecoration: "none",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    transition: "color 110ms",
    ":hover": {
      backgroundColor: theme.colors.N10,
      textDecoration: "none"
    },
    ":active": {
      backgroundColor: theme.colors.N10
    },
    ":after": {
      borderRadius: 2,
      bottom: 2,
      content: '" "',
      pointerEvents: "none",
      position: "absolute",
      right: 6,
      top: 2,
      transition: "background-color 110ms",
      width: 4
    }
  }, selectedStyles);
}), PrimaryNavHeading = styled.h3(_ref3 => {
  let depth = _ref3.depth;
  return {
    color: theme.colors.N40,
    fontSize: "0.85em",
    fontWeight: "bold",
    marginTop: "2em",
    paddingLeft: depth ? PRIMARY_NAV_GUTTER * depth : PRIMARY_NAV_GUTTER,
    paddingRight: PRIMARY_NAV_GUTTER,
    textTransform: "uppercase"
  };
}), Wrapper = styled.nav({
  borderBottom: "1px solid ".concat(theme.colors.N10),
  color: theme.colors.text,
  fontSize: "0.85em"
}), SecondaryNavItem = styled(ItemElement)(_ref => {
  let isSelected = _ref.isSelected;
  return {
    boxShadow: "inset 0 ".concat(isSelected ? -2 : 0, "px 0 currentColor"),
    color: isSelected ? theme.colors.text : theme.colors.N60,
    cursor: "pointer",
    display: "inline-block",
    marginRight: theme.gridSize,
    paddingBottom: 2 * theme.gridSize,
    paddingTop: 2 * theme.gridSize,
    transition: "box-shadow 200ms",
    ":hover": {
      color: theme.colors.text,
      textDecoration: "none"
    }
  };
}), SecondaryNav = _ref2 => {
  let children = _ref2.children;
  return React__default.createElement(Wrapper, null, children);
};

exports.BrandItem = BrandItem, exports.PrimaryNav = PrimaryNav, exports.PrimaryNavItem = PrimaryNavItem, 
exports.PrimaryNavHeading = PrimaryNavHeading, exports.PrimaryNavScrollArea = PrimaryNavScrollArea, 
exports.NavGroupIcons = NavGroupIcons, exports.PRIMARY_NAV_GUTTER = PRIMARY_NAV_GUTTER, 
exports.SecondaryNav = SecondaryNav, exports.SecondaryNavItem = SecondaryNavItem;
